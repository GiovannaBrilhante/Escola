{"ast":null,"code":"var _jsxFileName = \"/Users/u21431/escola/Escola/src/components/CrudCarometro/CrudCarometro.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './CrudCarometro.css';\nimport Main from '../templates/Main';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst title = \"Carometro\";\nconst urlAPIaluno = \"http://localhost:5258/api/aluno\"; //\"http://localhost:7250/api/aluno\";\n\nconst urlAPIcurso = \"http://localhost:5258/api/curso\";\nconst initialState = {\n  aluno: {\n    id: 0,\n    ra: '',\n    nome: '',\n    codCurso: 0\n  },\n  listaAluno: [],\n  listaCurso: [],\n  listaCarometro: []\n};\nexport default class CrudCarometro extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = { ...initialState\n    };\n  }\n\n  componentDidMount() {\n    axios(urlAPIcurso).then(resp => {\n      this.setState({\n        listaCurso: resp.data\n      });\n    });\n    axios(urlAPIaluno).then(resp => {\n      this.setState({\n        listaAluno: resp.data\n      });\n    });\n  }\n\n  atualizaListaAlunos(event) {}\n\n  renderForm() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Curso: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"nomeCurso\",\n        onChange: e => this.atualizaListaAlunos(e),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          selected: true,\n          disabled: true,\n          value: \"\",\n          children: \"-- Escolha uma op\\xE7\\xE3o --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), this.state.listaCurso.map(curso => /*#__PURE__*/_jsxDEV(\"option\", {\n          name: \"nomeCurso\",\n          value: curso.nomeCurso,\n          children: [curso.codCurso, \" - \", curso.periodo]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n\n  letrasAleatorias() {\n    return Math.random().toString(36).substring(2, 9);\n  }\n\n  renderCards() {\n    return /*#__PURE__*/_jsxDEV(\"card\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carometro\",\n        children: this.state.listaAluno.map(aluno => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"card__image\",\n            src: `https://avatars.dicebear.com/api/big-smile/${getLetrasAleatorias()}.svg`,\n            alt: `Carometro de ` + aluno.nome\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: aluno.ra\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: aluno.nome\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: aluno.codCurso\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 37\n          }, this)]\n        }, aluno.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Main, {\n      title: title,\n      children: [this.renderForm(), this.renderCards()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/*\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './CrudCarometro.css';\nimport Main from '../templates/Main';\nconst title = \"Carometro\";\nconst urlAPI = \"http://localhost:5258/api/carometro\";\nconst urlAPIaluno = \"http://localhost:5258/api/aluno\";//\"http://localhost:7250/api/aluno\";\nconst urlAPIcurso = \"http://localhost:5258/api/curso\";\nconst initialState = {\n    curso: { id: 0, codCurso: '', nomeCurso: '', periodo: '' },\n    listaAluno: [],\n    listaCurso: [],\n}\nexport default function CrudCarometro(props) {\n    const [curso, setCurso] = useState(initialState.curso);\n    const [listaAluno, setListaAluno] = useState(initialState.listaAluno);\n    const [listaCurso, setListaCurso] = useState(initialState.listaCurso);\n\n    useEffect(() => {\n        axios(urlAPI).then(resp => {\n            setLista(resp.data )\n        })\n    }, [listaAluno]);\n\n    const atualizaLista = (event) => {\n        //clonar usuário a partir do state, para não alterar o state diretamente\n        const listaAlunos = { ...listaAluno };\n        //usar o atributo NAME do input identificar o campo a ser atualizado\n        listaAlunos[event.target.name] = event.target.value;\n        //atualizar o state\n        setListaAluno(listaAlunos);\n    }\n\n    const getListaAtualizada = (cursos, add = true) => {\n        const listas = lista.filter(a => a.id !== cursos.id);\n        if (add) listas.unshift(cursos);\n        return listas;\n    }\n\n    const renderSelect = () => {\n        return (\n            <div className=\"select-container\">\n                <label> Curso: </label>\n                <select name=\"nomeCurso\" onChange={e => this.atualizaLista(e)} required >\n                    <option selected disabled={true} value=\"\">\n                        -- Escolha uma opção --\n                    </option>\n                {this.state.listaCurso.map(\n                            (curso) =>\n                            <option name=\"nomeCurso\" value={curso.nomeCurso}>\n                                {curso.codCurso} - {curso.periodo}\n                            </option>\n                        )}\n                </select>\n                \n                <button className=\"btnVisualizar\"\n                    onClick={e => this.renderCards(e)} >\n                    Visualizar\n                </button>\n\n                <card></card>\n            </div>\n        )\n    }\n\n    const renderCards = () => {\n        return (\n            <card>\n                <div className=\"carometro\">\n                <table className=\"listaCarometros\" id=\"tblistaCarometro\">\n                    <tbody>\n                        {this.state.listaCarometro.map(\n                            (carometro) =>\n                                <tr key={aluno.id}>\n                                    <td>{aluno.ra}</td>\n                                    <td>{aluno.nome}</td>\n                                    <td><img className='imagemCarometro' ></img></td>\n                                </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            </card>\n        )\n    }\n\n    return (\n        <Main title={title}>\n            {renderSelect()}\n            {renderCards()}\n        </Main>\n    )\n}\n\n\nexport default class CrudCarometro extends Component {\n    state = { ...initialState }\n    componentDidMount() {\n        axios(urlAPI).then(resp => {\n            this.setState({ lista: resp.data })\n        })\n\n        axios(urlAPIcurso).then(resp => {\n            this.setState({ listaCurso: resp.data })\n        })\n\n        axios(urlAPIaluno).then(resp => {\n            this.setState({ listaAluno: resp.data })\n        })\n    }\n\n    atualizaListaAlunos(event){\n\n    }\n\n    renderForm() {\n        return (\n            <div className=\"select-container\">\n                <label> Curso: </label>\n                <select name=\"nomeCurso\" onChange={e => this.atualizaCurso(e)} required >\n                    <option selected disabled={true} value=\"\">\n                        -- Escolha uma opção --\n                    </option>\n                {this.state.listaCurso.map(\n                            (curso) =>\n                            <option name=\"nomeCurso\" value={curso.nomeCurso}>\n                                {curso.codCurso} - {curso.periodo}\n                            </option>\n                        )}\n                </select>\n                \n                <button className=\"btnVisualizar\"\n                    onClick={e => this.renderCards(e)} >\n                    Visualizar\n                </button>\n\n                <card></card>\n            </div>\n        )\n    }\n\n    renderCards() {\n        return (\n            <card>\n                <div className=\"carometro\">\n                <table className=\"listaCarometros\" id=\"tblistaCarometro\">\n                    <tbody>\n                        {this.state.listaCarometro.map(\n                            (carometro) =>\n                                <tr key={aluno.id}>\n                                    <td>{aluno.ra}</td>\n                                    <td>{aluno.nome}</td>\n                                    <td><img className='imagemCarometro' ></img></td>\n                                </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            </card>\n        )\n    }\n    render() {\n        return (\n            <Main title={title}>\n                {this.renderForm()}\n                {this.renderTable()}\n            </Main>\n        )\n    }\n}*/","map":{"version":3,"names":["React","Component","axios","Main","title","urlAPIaluno","urlAPIcurso","initialState","aluno","id","ra","nome","codCurso","listaAluno","listaCurso","listaCarometro","CrudCarometro","state","componentDidMount","then","resp","setState","data","atualizaListaAlunos","event","renderForm","e","map","curso","nomeCurso","periodo","letrasAleatorias","Math","random","toString","substring","renderCards","getLetrasAleatorias","render"],"sources":["/Users/u21431/escola/Escola/src/components/CrudCarometro/CrudCarometro.js"],"sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './CrudCarometro.css';\nimport Main from '../templates/Main';\nconst title = \"Carometro\";\nconst urlAPIaluno = \"http://localhost:5258/api/aluno\";//\"http://localhost:7250/api/aluno\";\nconst urlAPIcurso = \"http://localhost:5258/api/curso\";\nconst initialState = {\n    aluno: { id: 0, ra: '', nome: '', codCurso: 0 },\n    listaAluno: [],\n    listaCurso: [],\n    listaCarometro:[],\n}\nexport default class CrudCarometro extends Component {\n    state = { ...initialState }\n    componentDidMount() {\n        axios(urlAPIcurso).then(resp => {\n            this.setState({ listaCurso: resp.data })\n        })\n\n        axios(urlAPIaluno).then(resp => {\n            this.setState({ listaAluno: resp.data })\n        })\n    }\n\n    atualizaListaAlunos(event){\n\n    }\n\n    renderForm() {\n        return (\n            <div className=\"select-container\">\n                <label> Curso: </label>\n                <select name=\"nomeCurso\" onChange={e => this.atualizaListaAlunos(e)} required >\n                    <option selected disabled={true} value=\"\">\n                        -- Escolha uma opção --\n                    </option>\n                {this.state.listaCurso.map(\n                            (curso) =>\n                            <option name=\"nomeCurso\" value={curso.nomeCurso}>\n                                {curso.codCurso} - {curso.periodo}\n                            </option>\n                        )}\n                </select>\n            </div>\n        )\n    }\n\n    letrasAleatorias() {\n        return Math.random().toString(36).substring(2, 9);\n    }\n\n    renderCards() {\n        return (\n            <card>\n                <div className=\"carometro\">      \n                        {this.state.listaAluno.map(\n                            (aluno) =>\n                                <div key={aluno.id}>\n                                    <img  className=\"card__image\" src={`https://avatars.dicebear.com/api/big-smile/${getLetrasAleatorias()}.svg`} alt={`Carometro de `+ aluno.nome}/>\n                                    <div>{aluno.ra}</div>\n                                    <div>{aluno.nome}</div>\n                                    <div>{aluno.codCurso}</div>\n                                </div>\n                        )}\n            </div>\n            </card>\n        )\n    }\n    render() {\n        return (\n            <Main title={title}>\n                {this.renderForm()}\n                {this.renderCards()}\n            </Main>\n        )\n    }\n}\n\n/*\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './CrudCarometro.css';\nimport Main from '../templates/Main';\nconst title = \"Carometro\";\nconst urlAPI = \"http://localhost:5258/api/carometro\";\nconst urlAPIaluno = \"http://localhost:5258/api/aluno\";//\"http://localhost:7250/api/aluno\";\nconst urlAPIcurso = \"http://localhost:5258/api/curso\";\nconst initialState = {\n    curso: { id: 0, codCurso: '', nomeCurso: '', periodo: '' },\n    listaAluno: [],\n    listaCurso: [],\n}\nexport default function CrudCarometro(props) {\n    const [curso, setCurso] = useState(initialState.curso);\n    const [listaAluno, setListaAluno] = useState(initialState.listaAluno);\n    const [listaCurso, setListaCurso] = useState(initialState.listaCurso);\n\n    useEffect(() => {\n        axios(urlAPI).then(resp => {\n            setLista(resp.data )\n        })\n    }, [listaAluno]);\n\n    const atualizaLista = (event) => {\n        //clonar usuário a partir do state, para não alterar o state diretamente\n        const listaAlunos = { ...listaAluno };\n        //usar o atributo NAME do input identificar o campo a ser atualizado\n        listaAlunos[event.target.name] = event.target.value;\n        //atualizar o state\n        setListaAluno(listaAlunos);\n    }\n\n    const getListaAtualizada = (cursos, add = true) => {\n        const listas = lista.filter(a => a.id !== cursos.id);\n        if (add) listas.unshift(cursos);\n        return listas;\n    }\n\n    const renderSelect = () => {\n        return (\n            <div className=\"select-container\">\n                <label> Curso: </label>\n                <select name=\"nomeCurso\" onChange={e => this.atualizaLista(e)} required >\n                    <option selected disabled={true} value=\"\">\n                        -- Escolha uma opção --\n                    </option>\n                {this.state.listaCurso.map(\n                            (curso) =>\n                            <option name=\"nomeCurso\" value={curso.nomeCurso}>\n                                {curso.codCurso} - {curso.periodo}\n                            </option>\n                        )}\n                </select>\n                \n                <button className=\"btnVisualizar\"\n                    onClick={e => this.renderCards(e)} >\n                    Visualizar\n                </button>\n\n                <card></card>\n            </div>\n        )\n    }\n\n    const renderCards = () => {\n        return (\n            <card>\n                <div className=\"carometro\">\n                <table className=\"listaCarometros\" id=\"tblistaCarometro\">\n                    <tbody>\n                        {this.state.listaCarometro.map(\n                            (carometro) =>\n                                <tr key={aluno.id}>\n                                    <td>{aluno.ra}</td>\n                                    <td>{aluno.nome}</td>\n                                    <td><img className='imagemCarometro' ></img></td>\n                                </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            </card>\n        )\n    }\n\n    return (\n        <Main title={title}>\n            {renderSelect()}\n            {renderCards()}\n        </Main>\n    )\n}\n\n\nexport default class CrudCarometro extends Component {\n    state = { ...initialState }\n    componentDidMount() {\n        axios(urlAPI).then(resp => {\n            this.setState({ lista: resp.data })\n        })\n\n        axios(urlAPIcurso).then(resp => {\n            this.setState({ listaCurso: resp.data })\n        })\n\n        axios(urlAPIaluno).then(resp => {\n            this.setState({ listaAluno: resp.data })\n        })\n    }\n\n    atualizaListaAlunos(event){\n\n    }\n\n    renderForm() {\n        return (\n            <div className=\"select-container\">\n                <label> Curso: </label>\n                <select name=\"nomeCurso\" onChange={e => this.atualizaCurso(e)} required >\n                    <option selected disabled={true} value=\"\">\n                        -- Escolha uma opção --\n                    </option>\n                {this.state.listaCurso.map(\n                            (curso) =>\n                            <option name=\"nomeCurso\" value={curso.nomeCurso}>\n                                {curso.codCurso} - {curso.periodo}\n                            </option>\n                        )}\n                </select>\n                \n                <button className=\"btnVisualizar\"\n                    onClick={e => this.renderCards(e)} >\n                    Visualizar\n                </button>\n\n                <card></card>\n            </div>\n        )\n    }\n\n    renderCards() {\n        return (\n            <card>\n                <div className=\"carometro\">\n                <table className=\"listaCarometros\" id=\"tblistaCarometro\">\n                    <tbody>\n                        {this.state.listaCarometro.map(\n                            (carometro) =>\n                                <tr key={aluno.id}>\n                                    <td>{aluno.ra}</td>\n                                    <td>{aluno.nome}</td>\n                                    <td><img className='imagemCarometro' ></img></td>\n                                </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            </card>\n        )\n    }\n    render() {\n        return (\n            <Main title={title}>\n                {this.renderForm()}\n                {this.renderTable()}\n            </Main>\n        )\n    }\n}*/"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}