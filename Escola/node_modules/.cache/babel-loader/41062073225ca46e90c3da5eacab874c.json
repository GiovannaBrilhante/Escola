{"ast":null,"code":"var _jsxFileName = \"/Users/u21431/escola/Escola/src/components/CrudCarometro/CrudCarometro.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './CrudCarometro.css';\nimport Main from '../templates/Main';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst title = \"Carometro\";\nconst urlAPI = \"http://localhost:5258/api/carometro\";\nconst urlAPIaluno = \"http://localhost:5258/api/aluno\"; //\"http://localhost:7250/api/aluno\";\n\nconst urlAPIcurso = \"http://localhost:5258/api/curso\";\nconst initialState = {\n  curso: {\n    id: 0,\n    codCurso: '',\n    nomeCurso: '',\n    periodo: ''\n  },\n  listaAluno: [],\n  listaCurso: []\n};\nexport default function CrudCarometro(props) {\n  _s();\n\n  const [curso, setCurso] = useState(initialState.curso);\n  const [listaAluno, setListaAluno] = useState(initialState.listaAluno);\n  const [listaCurso, setListaCurso] = useState(initialState.listaCurso);\n  useEffect(() => {\n    axios(urlAPI).then(resp => {\n      setLista(resp.data);\n    });\n  }, [listaAluno]);\n\n  const atualizaLista = event => {\n    //clonar usuário a partir do state, para não alterar o state diretamente\n    const listaAlunos = { ...listaAluno\n    }; //usar o atributo NAME do input identificar o campo a ser atualizado\n\n    listaAlunos[event.target.name] = event.target.value; //atualizar o state\n\n    setListaAluno(listaAlunos);\n  };\n\n  const getListaAtualizada = function (cursos) {\n    let add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const listas = lista.filter(a => a.id !== cursos.id);\n    if (add) listas.unshift(cursos);\n    return listas;\n  };\n\n  const renderForm = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Curso: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"nomeCurso\",\n        onChange: e => this.atualizaCurso(e),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          selected: true,\n          disabled: true,\n          value: \"\",\n          children: \"-- Escolha uma op\\xE7\\xE3o --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), this.state.listaCurso.map(curso => /*#__PURE__*/_jsxDEV(\"option\", {\n          name: \"nomeCurso\",\n          value: curso.nomeCurso,\n          children: [curso.codCurso, \" - \", curso.periodo]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btnVisualizar\",\n        onClick: e => this.renderCards(e),\n        children: \"Visualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"card\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderCards = () => {\n    return /*#__PURE__*/_jsxDEV(\"card\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carometro\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"listaCarometros\",\n          id: \"tblistaCarometro\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.state.listaCarometro.map(carometro => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: aluno.ra\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: aluno.nome\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"imagemCarometro\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 37\n              }, this)]\n            }, aluno.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Main, {\n    title: title,\n    children: [renderForm(), renderCards()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n/*\nexport default class CrudCarometro extends Component {\n    state = { ...initialState }\n    componentDidMount() {\n        axios(urlAPI).then(resp => {\n            this.setState({ lista: resp.data })\n        })\n\n        axios(urlAPIcurso).then(resp => {\n            this.setState({ listaCurso: resp.data })\n        })\n\n        axios(urlAPIaluno).then(resp => {\n            this.setState({ listaAluno: resp.data })\n        })\n    }\n\n    atualizaListaAlunos(event){\n\n    }\n\n    renderForm() {\n        return (\n            <div className=\"select-container\">\n                <label> Curso: </label>\n                <select name=\"nomeCurso\" onChange={e => this.atualizaCurso(e)} required >\n                    <option selected disabled={true} value=\"\">\n                        -- Escolha uma opção --\n                    </option>\n                {this.state.listaCurso.map(\n                            (curso) =>\n                            <option name=\"nomeCurso\" value={curso.nomeCurso}>\n                                {curso.codCurso} - {curso.periodo}\n                            </option>\n                        )}\n                </select>\n                \n                <button className=\"btnVisualizar\"\n                    onClick={e => this.renderCards(e)} >\n                    Visualizar\n                </button>\n\n                <card></card>\n            </div>\n        )\n    }\n\n    renderCards() {\n        return (\n            <card>\n                <div className=\"carometro\">\n                <table className=\"listaCarometros\" id=\"tblistaCarometro\">\n                    <tbody>\n                        {this.state.listaCarometro.map(\n                            (carometro) =>\n                                <tr key={aluno.id}>\n                                    <td>{aluno.ra}</td>\n                                    <td>{aluno.nome}</td>\n                                    <td><img className='imagemCarometro' ></img></td>\n                                </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            </card>\n        )\n    }\n    render() {\n        return (\n            <Main title={title}>\n                {this.renderForm()}\n                {this.renderTable()}\n            </Main>\n        )\n    }\n}*/\n\n_s(CrudCarometro, \"N3E3tCQ2IHVNF1E/CLl+HsJ7pms=\");\n\n_c = CrudCarometro;\n\nvar _c;\n\n$RefreshReg$(_c, \"CrudCarometro\");","map":{"version":3,"names":["React","Component","axios","Main","title","urlAPI","urlAPIaluno","urlAPIcurso","initialState","curso","id","codCurso","nomeCurso","periodo","listaAluno","listaCurso","CrudCarometro","props","setCurso","useState","setListaAluno","setListaCurso","useEffect","then","resp","setLista","data","atualizaLista","event","listaAlunos","target","name","value","getListaAtualizada","cursos","add","listas","lista","filter","a","unshift","renderForm","e","atualizaCurso","state","map","renderCards","listaCarometro","carometro","aluno","ra","nome"],"sources":["/Users/u21431/escola/Escola/src/components/CrudCarometro/CrudCarometro.js"],"sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './CrudCarometro.css';\nimport Main from '../templates/Main';\nconst title = \"Carometro\";\nconst urlAPI = \"http://localhost:5258/api/carometro\";\nconst urlAPIaluno = \"http://localhost:5258/api/aluno\";//\"http://localhost:7250/api/aluno\";\nconst urlAPIcurso = \"http://localhost:5258/api/curso\";\nconst initialState = {\n    curso: { id: 0, codCurso: '', nomeCurso: '', periodo: '' },\n    listaAluno: [],\n    listaCurso: [],\n}\nexport default function CrudCarometro(props) {\n    const [curso, setCurso] = useState(initialState.curso);\n    const [listaAluno, setListaAluno] = useState(initialState.listaAluno);\n    const [listaCurso, setListaCurso] = useState(initialState.listaCurso);\n\n    useEffect(() => {\n        axios(urlAPI).then(resp => {\n            setLista(resp.data )\n        })\n    }, [listaAluno]);\n\n    const atualizaLista = (event) => {\n        //clonar usuário a partir do state, para não alterar o state diretamente\n        const listaAlunos = { ...listaAluno };\n        //usar o atributo NAME do input identificar o campo a ser atualizado\n        listaAlunos[event.target.name] = event.target.value;\n        //atualizar o state\n        setListaAluno(listaAlunos);\n    }\n\n    const getListaAtualizada = (cursos, add = true) => {\n        const listas = lista.filter(a => a.id !== cursos.id);\n        if (add) listas.unshift(cursos);\n        return listas;\n    }\n\n    const renderForm = () => {\n        return (\n            <div className=\"select-container\">\n                <label> Curso: </label>\n                <select name=\"nomeCurso\" onChange={e => this.atualizaCurso(e)} required >\n                    <option selected disabled={true} value=\"\">\n                        -- Escolha uma opção --\n                    </option>\n                {this.state.listaCurso.map(\n                            (curso) =>\n                            <option name=\"nomeCurso\" value={curso.nomeCurso}>\n                                {curso.codCurso} - {curso.periodo}\n                            </option>\n                        )}\n                </select>\n                \n                <button className=\"btnVisualizar\"\n                    onClick={e => this.renderCards(e)} >\n                    Visualizar\n                </button>\n\n                <card></card>\n            </div>\n        )\n    }\n\n    const renderCards = () => {\n        return (\n            <card>\n                <div className=\"carometro\">\n                <table className=\"listaCarometros\" id=\"tblistaCarometro\">\n                    <tbody>\n                        {this.state.listaCarometro.map(\n                            (carometro) =>\n                                <tr key={aluno.id}>\n                                    <td>{aluno.ra}</td>\n                                    <td>{aluno.nome}</td>\n                                    <td><img className='imagemCarometro' ></img></td>\n                                </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            </card>\n        )\n    }\n\n    return (\n        <Main title={title}>\n            {renderForm()}\n            {renderCards()}\n        </Main>\n    )\n}\n\n/*\nexport default class CrudCarometro extends Component {\n    state = { ...initialState }\n    componentDidMount() {\n        axios(urlAPI).then(resp => {\n            this.setState({ lista: resp.data })\n        })\n\n        axios(urlAPIcurso).then(resp => {\n            this.setState({ listaCurso: resp.data })\n        })\n\n        axios(urlAPIaluno).then(resp => {\n            this.setState({ listaAluno: resp.data })\n        })\n    }\n\n    atualizaListaAlunos(event){\n\n    }\n\n    renderForm() {\n        return (\n            <div className=\"select-container\">\n                <label> Curso: </label>\n                <select name=\"nomeCurso\" onChange={e => this.atualizaCurso(e)} required >\n                    <option selected disabled={true} value=\"\">\n                        -- Escolha uma opção --\n                    </option>\n                {this.state.listaCurso.map(\n                            (curso) =>\n                            <option name=\"nomeCurso\" value={curso.nomeCurso}>\n                                {curso.codCurso} - {curso.periodo}\n                            </option>\n                        )}\n                </select>\n                \n                <button className=\"btnVisualizar\"\n                    onClick={e => this.renderCards(e)} >\n                    Visualizar\n                </button>\n\n                <card></card>\n            </div>\n        )\n    }\n\n    renderCards() {\n        return (\n            <card>\n                <div className=\"carometro\">\n                <table className=\"listaCarometros\" id=\"tblistaCarometro\">\n                    <tbody>\n                        {this.state.listaCarometro.map(\n                            (carometro) =>\n                                <tr key={aluno.id}>\n                                    <td>{aluno.ra}</td>\n                                    <td>{aluno.nome}</td>\n                                    <td><img className='imagemCarometro' ></img></td>\n                                </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            </card>\n        )\n    }\n    render() {\n        return (\n            <Main title={title}>\n                {this.renderForm()}\n                {this.renderTable()}\n            </Main>\n        )\n    }\n}*/"],"mappings":"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BAAK,SAAS,EAAC;gBAAf;kBAAA;kBAAA;kBAAA;gBAAA;cAAJ;gBAAA;gBAAA;gBAAA;cAAA,QAHJ;YAAA,GAASF,KAAK,CAACvC,EAAf;cAAA;cAAA;cAAA;YAAA,QAFP;UADL;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA;MADA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAkBH,CAnBD;;EAqBA,oBACI,QAAC,IAAD;IAAM,KAAK,EAAEN,KAAb;IAAA,WACKqC,UAAU,EADf,EAEKK,WAAW,EAFhB;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAMH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA5JwB9B,a;;KAAAA,a"},"metadata":{},"sourceType":"module"}